apiVersion: /v1
kind: Service
metadata:
  name: memphis-http-proxy
  namespace: {{ include "nats.namespace" . }}
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: {{ .Values.proxy.port }}
      targetPort: 4444
  selector:
    app: memphis-http-proxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memphis-http-proxy
  namespace: {{ include "nats.namespace" . }}
  labels:
    app: memphis-http-proxy
spec:
  {{- if .Values.cluster.enabled }}
  replicas: 2
  {{- else }}
  replicas: 1
  {{- end }}
  selector:
    matchLabels:
      app: memphis-http-proxy
  template:
    metadata:
      name: memphis-http-proxy
      labels:
        app: memphis-http-proxy
    spec:
      initContainers:
        - name: k8s-busybox-waits4broker
          image: busybox:1.28
          imagePullPolicy: Always
          command: ['sh', '-c', "until nslookup memphis-cluster.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for broker; sleep 2; done"]
      containers:
        - name: memphis-http-proxy
          image: memphisos/memphis-http-proxy:latest
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
          imagePullPolicy: Always
          ports:
            - containerPort: 4444
          env:
          - name: ROOT_USER
            value: {{ .Values.proxy.user | quote }}
          - name: HTTP_PORT
            value: {{ .Values.proxy.port | quote }}
          - name: MEMPHIS_HOST
            value: {{ include "memphis.svcName" . }}.{{ include "nats.namespace" . }}.svc.cluster.local
          - name: CONNECTION_TOKEN
            valueFrom:
              secretKeyRef:
                name: "memphis-creds"
                key: CONNECTION_TOKEN
          - name: JWT_SECRET
            valueFrom:
              secretKeyRef:
                name: "memphis-creds"
                key: JWT_SECRET
          - name: REFRESH_JWT_SECRET
            valueFrom:
              secretKeyRef:
                name: "memphis-creds"
                key: REFRESH_JWT_SECRET
          {{- with .Values.nats.tls }}
          {{ $secretName := tpl .secret.name $ }}
          {{- with .cert }}
          - name: CLIENT_CERT_PATH
            value: "/etc/nats-certs/clients/{{ $secretName }}/{{ . }}"
          {{- end }}
          {{- with .key }}
          - name: CLIENT_KEY_PATH
            value: "/etc/nats-certs/clients/{{ $secretName }}/{{ . }}"
          {{- end }}
          {{- with .ca }}
          - name: ROOT_CA_PATH
            value: /etc/nats-certs/clients/{{ $secretName }}/{{ . }}
          {{- end }}
          volumeMounts:
            - name: {{ $secretName }}-clients-volume
              mountPath: /etc/nats-certs/clients/{{ $secretName }}
          {{- end }}
         
      {{- with .Values.nats.tls }}
      {{ $secretName := tpl .secret.name $ }}      
      volumes:
      - name: {{ $secretName }}-clients-volume
        secret:
          secretName: {{ $secretName }}
      {{- end }}
